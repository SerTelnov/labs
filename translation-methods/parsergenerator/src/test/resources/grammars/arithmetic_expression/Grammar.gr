expr returns (Integer outVal)
    : total
        { Integer v = totalNode.getValue(); }
        { outVal = v == null ? 0 : v;       }
      expr1<outVal>
        { if (expr1Node.getValue() != null) }
        {   outVal = expr1Node.getValue();  }
    ;

expr1 (Integer inVal) returns (Integer outVal)
    : opPlusMinus
        { String op = opPlusMinusNode.getValue();       }
      total
        { Integer v = totalNode.getValue();             }
        { if (op.equals("+")) outVal = inVal + v;       }
        { else if (op.equals("-")) outVal = inVal - v;  }
        { else outVal = inVal;                          }
      expr1<outVal>
        { if (expr1Node.getValue() != null)             }
        {   outVal = expr1Node.getValue();              }
    |
    ;

opPlusMinus returns (String s)
    : PLUS  { s = "+";  }
    | MINUS { s = "-";  }
    ;

total returns (Integer outVal)
    : unOps
        { outVal = unOpsNode.getValue();        }
      total1<outVal>
        { if (total1Node.getValue() != null)    }
        {   outVal = total1Node.getValue();     }
    ;

total1 (Integer inVal) returns (Integer outVal)
    : opMulDiv
        { String op = opMulDivNode.getValue();          }
      unOps
        { Integer v = unOpsNode.getValue();             }
        { if (op.equals("*")) outVal = inVal * v;       }
        { else if (op.equals("/")) outVal = inVal / v;  }
        { else outVal = inVal;                          }
      total1<outVal>
        { if (total1Node.getValue() != null)            }
        {   outVal = total1Node.getValue();             }
    |
    ;

opMulDiv returns (String s)
    : MUL   { s = "*";  }
    | DIV   { s = "/";  }
    ;

unOps returns (Integer outVal)
    : opPlusMinus
        { String unOp = opPlusMinusNode.getValue();             }
      term
        { String v = getLastTerminal();                         }
        { outVal = Integer.valueOf(unOp + v);                   }
    | term
        { outVal = termNode1.getValue();    }
      fact<outVal>
        { Integer factVal = factNode.getValue(); }
        { if (factVal != null) outVal = factVal; }
    ;

fact (Integer inVal) returns (Integer outVal)
    : FACTORIAL
        { outVal = countFactorial(inVal);   }
      fact<outVal>
        { Integer factVal = factNode.getValue(); }
        { if (factVal != null) outVal = factVal; }
    |
    ;

term returns (Integer outVal)
    : VALUE
        { outVal = Integer.valueOf(getLastTerminal());          }
    | LPAREN expr RPAREN
        { outVal = exprNode.getValue();                         }
    ;
